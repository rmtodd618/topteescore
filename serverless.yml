org: rmtodd618
service: score
app: strokes
configValidationMode: error
provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 512
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STROKES_BUCKET: "golf-strokes-recorded"
    iotProject: "Golf_Tracker"
    DYNAMODBTABLE: "strokes-recorder"
  iamRoleStatements:
  - Effect: Allow
    Action:
      - iot:*
    Resource: "*"
  - Effect: Allow
    Action:
      - sqs:*
    Resource: arn:aws:sqs:*:*
  - Effect: Allow
    Action:
      - s3:*
    Resource: "*"
  - Effect: Allow
    Action:
      - lambda:GetFunction
      - lambda:InvokeFunction
      - lambda:GetFunctionConfiguration
    Resource: "*"
  - Effect: Allow
    Action:
      - dynamodb:*
    Resource: "*"
  - Effect: Allow
    Action:
      - sns:*
    Resource: "*"

resources:
  Description: "Stroke tracker for stage"
  Resources:
    SnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: sns-topic-name
    LAMBDAFAILURE:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "LambdaFailureQueue"
              - "Arn"
          maxReceiveCount: 2

    LambdaFailureQueue:
      Type: "AWS::SQS::Queue"
    StrokeRecorderBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.STROKES_BUCKET}
    ScoreCard:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "serialNumber"
            AttributeType: "S"
          - AttributeName: "holeNumber"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "serialNumber"
            KeyType: "HASH"
          - AttributeName: "holeNumber"
            KeyType: "RANGE"
        ProvisionedThroughput:
           ReadCapacityUnits: 1
           WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODBTABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    DynamoDBAccessRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: DynamoDBAccessRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
        Policies:
        - PolicyName: "DynamoDBAccessPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:Scan"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODBTABLE}"
  Outputs:
    MySnsTopicArn:
      Description: "ARN of the SNS topic"
      Value:
        Ref: SnsTopic
      Export:
        Name: ${self:service}-${self:provider.stage}-MySnsTopicArn
functions:
  Iot:
    handler: app/iot/iot.handler
    description: Handles the clicks fo the button
    timeout: 60
    environment:
      MY_SNS_TOPIC_ARN: "arn:aws:sns:us-east-1:776684093134:sns-topic-name" # Replace with your ARN
    onError: {
      "Fn::GetAtt": ["LambdaFailureQueue", "Arn"]
    }
    events:
      - iot:
          sql: "SELECT * FROM 'iotbutton/+'"
          enabled: true
    tracing: true

  getStrokes:
    handler: src/getStrokes.handler
    events:
      - http:
          path: /getStrokes
          method: get
  graphql:
    handler: handler.graphqlHandler
    events:
    - http:
        path: graphql
        method: post
        cors: true
    - http:
        path: graphql
        method: get
        cors: true

plugins:
  - serverless-s3-remover

custom:
  remover:
    prompt: true
    buckets:
      - ${self:provider.environment.STROKES_BUCKET}